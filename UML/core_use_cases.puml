@startuml

abstract class Multiset<T> {
boolean add(T item)
void remove(T item)
boolean contains(T item)
boolean is_empty()
int count(T item)
int size()
}

class Tree<T> {
private T root
private list<Tree<T>> subtrees

boolean is_empty()
int __len__()
int count(T item)
string __str__()
private string str_indented(int depth)
float average()
private int[] average_helper()
boolean __eq__(Tree<T> other)
boolean __contains__(T item)
Tree<T>[] leaves()
boolean delete_item(T item)
private void delete_root()
private T extract_leaf()
void insert(T item)
boolean insert_child(T item, T parent)
}

class TreeMultiSet<T> {
private Tree<T> tree

boolean add(T item)
void remove(T item)
boolean contains(T item)
boolean is_empty()
integer count(T item)
integer size()
}

class ArrayListMultiSet<T> {
private T[] list

boolean add(T item)
void remove(T item)
boolean contains(T item)
boolean is_empty()
integer count(T item)
integer size()
}

class LinkedListMultiSet<T> {
private Node front
private int size

boolean add(T item)
void remove(T item)
boolean contains(T item)
boolean is_empty()
int count(T item)
int size()
}

class Node<T> {
T item
private Node<T> next
}

TreeMultiSet <|-- Multiset : implements
ArrayListMultiSet <|-- Multiset : implements
LinkedListMultiSet <|-- Multiset : implements

TreeMultiSet *-- Tree : contains
LinkedListMultiSet *-- Node : contains

@enduml